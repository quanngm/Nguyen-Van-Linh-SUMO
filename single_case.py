import xml.etree.ElementTree as ET
import os
import subprocess
import pandas as pd

# üõ† ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n ƒë·∫øn c√°c file ƒë·∫ßu v√†o
NETWORK_FILE = "simpleT.net.xml"
ROUTE_FILE = "simpleT.rou.xml"
CONFIG_FILE = "simpleT.sumocfg"
EMISSION_FILE = "emissions_data.xml"

# üõ† Th∆∞ m·ª•c ch·ª©a file ƒë·∫ßu ra
OUTPUT_FOLDER = "output/"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

MODIFIED_ROUTE_FILE = os.path.join(OUTPUT_FOLDER, "modified_simpleT.rou.xml")

# üõ† Ki·ªÉm tra c√°c file ƒë·∫ßu v√†o tr∆∞·ªõc khi ch·∫°y m√¥ ph·ªèng
def check_input_files():
    """Ki·ªÉm tra xem c√°c file ƒë·∫ßu v√†o c√≥ t·ªìn t·∫°i kh√¥ng."""
    missing_files = []
    for file in [NETWORK_FILE, ROUTE_FILE, CONFIG_FILE]:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Error: Missing input files: {', '.join(missing_files)}")
        return False
    return True

# üõ† L·∫•y t·ªïng s·ªë l∆∞·ª£ng xe hi·ªán c√≥ t·ª´ .rou.xml
def get_total_vehicles(root, vehicle_types):
    """L·∫•y t·ªïng s·ªë l∆∞·ª£ng xe hi·ªán c√≥ trong file .rou.xml."""
    total_vehicles = 0
    vehicle_counts = {vtype: 0 for vtype in vehicle_types}
    
    for flow in root.findall("flow"):
        vtype = flow.get("type")
        if vtype in vehicle_counts:
            count = int(flow.get("number"))
            vehicle_counts[vtype] += count
            total_vehicles += count

    return total_vehicles, vehicle_counts

# üõ† ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng xe theo ph·∫ßn trƒÉm nh·∫≠p v√†o
def adjust_vehicle_numbers(xml_file, output_file, new_percentages):
    """ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng xe trong file .rou.xml theo ph·∫ßn trƒÉm do ng∆∞·ªùi d√πng nh·∫≠p v√†o."""
    tree = ET.parse(xml_file)
    root = tree.getroot()

    vehicle_types = new_percentages.keys()
    total_vehicles, vehicle_counts = get_total_vehicles(root, vehicle_types)

    # T√≠nh to√°n s·ªë l∆∞·ª£ng xe m·ªõi theo ph·∫ßn trƒÉm ng∆∞·ªùi d√πng nh·∫≠p
    new_counts = {vtype: int((new_percentages[vtype] / 100) * total_vehicles) for vtype in vehicle_types}

    for flow in root.findall("flow"):
        vtype = flow.get("type")
        if vtype in new_counts:
            original_count = int(flow.get("number"))
            type_ratio = original_count / vehicle_counts[vtype] if vehicle_counts[vtype] > 0 else 1
            flow.set("number", str(max(1, int(new_counts[vtype] * type_ratio))))  # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xe

    tree.write(output_file, encoding="utf-8", xml_declaration=True)
    print(f"‚úÖ Updated .rou.xml saved as: {output_file}")

# üõ† C·∫≠p nh·∫≠t file c·∫•u h√¨nh SUMO ƒë·ªÉ s·ª≠ d·ª•ng file route m·ªõi
def update_sumo_config(config_file, output_file, new_route_file, emission_file):
    """C·∫≠p nh·∫≠t file .sumocfg ƒë·ªÉ s·ª≠ d·ª•ng route file ƒë√£ thay ƒë·ªïi v√† xu·∫•t file ph√°t th·∫£i."""
    tree = ET.parse(config_file)
    root = tree.getroot()

    for elem in root.findall(".//route-files"):
        elem.set("value", new_route_file)

    # C·∫≠p nh·∫≠t file ph√°t th·∫£i
    processing = root.find(".//processing")
    if processing is None:
        processing = ET.SubElement(root, "processing")

    emission_elem = processing.find(".//emission-output")
    if emission_elem is None:
        emission_elem = ET.SubElement(processing, "emission-output")

    emission_elem.set("value", emission_file)

    tree.write(output_file, encoding="utf-8", xml_declaration=True)
    print(f"‚úÖ Updated .sumocfg saved as: {output_file}")

# üõ† Ch·∫°y m√¥ ph·ªèng SUMO
def run_sumo_simulation(config_file):
    """Ch·∫°y m√¥ ph·ªèng SUMO v·ªõi file c·∫•u h√¨nh ƒë√£ ch·ªânh s·ª≠a."""
    print("üö¶ Running SUMO Simulation...")
    sumo_command = ["sumo", "-c", config_file]
    subprocess.run(sumo_command)

# üõ† Tr√≠ch xu·∫•t d·ªØ li·ªáu ph√°t th·∫£i t·ª´ SUMO
def parse_emission_data(emission_file):
    """Tr√≠ch xu·∫•t d·ªØ li·ªáu ph√°t th·∫£i t·ª´ file emissions_data.xml."""
    if not os.path.exists(emission_file):
        print(f"‚ùå No emission data found for {emission_file}. Skipping...")
        return None

    tree = ET.parse(emission_file)
    root = tree.getroot()

    total_emissions = {
        "CO2 (g)": 0,
        "CO (g)": 0,
        "NOx (g)": 0,
        "PMx (g)": 0,
        "Fuel (L)": 0
    }

    for timestep in root.findall("timestep"):
        for vehicle in timestep.findall("vehicle"):
            total_emissions["CO2 (g)"] += float(vehicle.get("CO2", 0))
            total_emissions["CO (g)"] += float(vehicle.get("CO", 0))
            total_emissions["NOx (g)"] += float(vehicle.get("NOx", 0))
            total_emissions["PMx (g)"] += float(vehicle.get("PMx", 0))
            total_emissions["Fuel (L)"] += float(vehicle.get("fuel", 0))

    df = pd.DataFrame([total_emissions])
    return df

# üõ† L∆∞u d·ªØ li·ªáu v√†o CSV
def save_data(df, output_file):
    """L∆∞u d·ªØ li·ªáu v√†o file CSV."""
    df.to_csv(output_file, index=False)
    print(f"‚úÖ Emission data saved to {output_file}")

# üõ† Ch·∫°y m√¥ ph·ªèng v·ªõi m·ªôt k·ªãch b·∫£n duy nh·∫•t
def main():
    """Ch·∫°y to√†n b·ªô quy tr√¨nh m√¥ ph·ªèng v·ªõi ph·∫ßn trƒÉm xe nh·∫≠p t·ª´ ng∆∞·ªùi d√πng."""
    
    # üîπ B∆∞·ªõc 1: Ki·ªÉm tra file ƒë·∫ßu v√†o
    if not check_input_files():
        print("‚è≠ Skipping simulation due to missing files.")
        return

    # üîπ B∆∞·ªõc 2: Nh·∫≠p ph·∫ßn trƒÉm xe t·ª´ ng∆∞·ªùi d√πng
    print("\nüî¢ Nh·∫≠p t·ª∑ l·ªá ph·∫ßn trƒÉm c·ªßa t·ª´ng lo·∫°i xe (t·ªïng c·ªông ph·∫£i l√† 100%)")
    vehicle_types = ["pkw", "bus", "bike", "scooter"]
    new_distribution = {}

    total_percent = 0
    for vtype in vehicle_types:
        percent = float(input(f"Nh·∫≠p t·ª∑ l·ªá ph·∫ßn trƒÉm c·ªßa {vtype}: "))
        new_distribution[vtype] = percent
        total_percent += percent

    if total_percent != 100:
        print("‚ùå L·ªói: T·ªïng ph·∫ßn trƒÉm ph·∫£i b·∫±ng 100%. H√£y nh·∫≠p l·∫°i!")
        return

    print(f"\nüöó Ph√¢n b·ªë ph∆∞∆°ng ti·ªán: {new_distribution}")

    # üîπ B∆∞·ªõc 3: Ch·ªânh s·ª≠a s·ªë l∆∞·ª£ng xe
    adjust_vehicle_numbers(ROUTE_FILE, MODIFIED_ROUTE_FILE, new_distribution)
    update_sumo_config(CONFIG_FILE, CONFIG_FILE, MODIFIED_ROUTE_FILE, EMISSION_FILE)

    # üîπ B∆∞·ªõc 4: Ch·∫°y m√¥ ph·ªèng SUMO
    run_sumo_simulation(CONFIG_FILE)

    # üîπ B∆∞·ªõc 5: Tr√≠ch xu·∫•t d·ªØ li·ªáu ph√°t th·∫£i
    df_emission = parse_emission_data(EMISSION_FILE)
    if df_emission is None:
        print("‚ùå No emission data available. Exiting.")
        return

    # üîπ B∆∞·ªõc 6: L∆∞u d·ªØ li·ªáu ph√°t th·∫£i v√†o CSV
    output_file = os.path.join(OUTPUT_FOLDER, "emissions_output_{new_distribution}.csv")
    save_data(df_emission, output_file)

    print("‚úÖ SUMO Simulation Completed Successfully!")

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    main()
